export declare const defaultTableProps: {
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dropdownPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    rowSelection: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        getCheckboxProps: any;
        selections: boolean | unknown[] | (() => unknown[]);
        hideDefaultSelections: boolean;
        fixed: boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    }>;
    pagination: import("vue-types").VueTypeDef<boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "middle" | "large">;
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    components: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    columns: {
        type: import("vue").PropType<Partial<{
            className: string;
            dataIndex: string;
            customRender: (...args: any[]) => any;
            customCell: (...args: any[]) => any;
            customHeaderCell: (...args: any[]) => any;
            colSpan: number;
            filteredValue: unknown[];
            defaultFilteredValue: unknown[];
            sortDirections: unknown[];
        } & {
            title?: import("../_util/type").VueNode;
            key?: string | number;
            fixed?: boolean | "left" | "right";
            ellipsis?: boolean;
            align?: "center" | "left" | "right";
            width?: string | number;
            filters?: {
                text: string;
                value: string;
                children: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
            }[];
            filterMultiple?: boolean;
            filterDropdown?: any;
            filterDropdownVisible?: boolean;
            sorter?: any;
            defaultSortOrder?: import("./interface").SortOrder;
            filterIcon?: any;
            filtered?: boolean;
            sortOrder?: boolean | "descend" | "ascend";
        }>>;
    };
    rowKey: import("vue-types").VueTypeDef<any>;
    rowClassName: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    expandedRowRender: import("vue-types").VueTypeValidableDef<any>;
    defaultExpandAllRows: import("vue-types").VueTypeValidableDef<boolean>;
    defaultExpandedRowKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    expandedRowKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    expandIconAsCell: import("vue-types").VueTypeValidableDef<boolean>;
    expandIconColumnIndex: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    expandRowByClick: import("vue-types").VueTypeValidableDef<boolean>;
    loading: import("vue-types").VueTypeDef<boolean | {
        prefixCls: string;
        spinning: boolean;
        size: "default" | "small" | "large";
        wrapperClassName: string;
        tip: string;
        delay: number;
        indicator: any;
    }>;
    locale: import("vue-types").VueTypeLooseShape<{
        filterTitle: string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: string;
        expand: string;
        collapse: string;
    }>;
    indentSize: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    customRow: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    customHeaderRow: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    useFixedHeader: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    showHeader: import("vue-types").VueTypeValidableDef<boolean>;
    footer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    title: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number | boolean;
            y?: string | number | boolean;
            scrollToFirstRowOnChange?: boolean;
        }>;
    };
    childrenColumnName: import("vue-types").VueTypeDef<string | unknown[]>;
    bodyStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    sortDirections: {
        type: import("vue").PropType<import("./interface").SortOrder[]>;
    };
    tableLayout: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transformCellText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onExpandedRowsChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onExpand: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onRowClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
declare const _default: import("vue").DefineComponent<{
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    dropdownPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    rowSelection: import("vue-types").VueTypeDef<{
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        getCheckboxProps: any;
        selections: boolean | unknown[] | (() => unknown[]);
        hideDefaultSelections: boolean;
        fixed: boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    }>;
    pagination: import("vue-types").VueTypeDef<boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "middle" | "large">;
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    components: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    columns: {
        type: import("vue").PropType<Partial<{
            className: string;
            dataIndex: string;
            customRender: (...args: any[]) => any;
            customCell: (...args: any[]) => any;
            customHeaderCell: (...args: any[]) => any;
            colSpan: number;
            filteredValue: unknown[];
            defaultFilteredValue: unknown[];
            sortDirections: unknown[];
        } & {
            title?: import("../_util/type").VueNode;
            key?: string | number;
            fixed?: boolean | "left" | "right";
            ellipsis?: boolean;
            align?: "center" | "left" | "right";
            width?: string | number;
            filters?: {
                text: string;
                value: string;
                children: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
            }[];
            filterMultiple?: boolean;
            filterDropdown?: any;
            filterDropdownVisible?: boolean;
            sorter?: any;
            defaultSortOrder?: import("./interface").SortOrder;
            filterIcon?: any;
            filtered?: boolean;
            sortOrder?: boolean | "descend" | "ascend";
        }>>;
    };
    rowKey: import("vue-types").VueTypeDef<any>;
    rowClassName: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    expandedRowRender: import("vue-types").VueTypeValidableDef<any>;
    defaultExpandAllRows: import("vue-types").VueTypeValidableDef<boolean>;
    defaultExpandedRowKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    expandedRowKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    expandIconAsCell: import("vue-types").VueTypeValidableDef<boolean>;
    expandIconColumnIndex: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    expandRowByClick: import("vue-types").VueTypeValidableDef<boolean>;
    loading: import("vue-types").VueTypeDef<boolean | {
        prefixCls: string;
        spinning: boolean;
        size: "default" | "small" | "large";
        wrapperClassName: string;
        tip: string;
        delay: number;
        indicator: any;
    }>;
    locale: import("vue-types").VueTypeLooseShape<{
        filterTitle: string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: string;
        expand: string;
        collapse: string;
    }>;
    indentSize: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    customRow: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    customHeaderRow: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    useFixedHeader: import("vue-types").VueTypeValidableDef<boolean>;
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    showHeader: import("vue-types").VueTypeValidableDef<boolean>;
    footer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    title: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    scroll: {
        type: import("vue").PropType<{
            x?: string | number | boolean;
            y?: string | number | boolean;
            scrollToFirstRowOnChange?: boolean;
        }>;
    };
    childrenColumnName: import("vue-types").VueTypeDef<string | unknown[]>;
    bodyStyle: import("vue-types").VueTypeValidableDef<import("vue").CSSProperties>;
    sortDirections: {
        type: import("vue").PropType<import("./interface").SortOrder[]>;
    };
    tableLayout: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    expandIcon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    transformCellText: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onExpandedRowsChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onExpand: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onRowClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    vcTable: any;
    checkboxPropsCache: {};
    store: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, any, {}, {
    setTableRef(table: any): void;
    getCheckboxPropsByItem(item: any, index: any): any;
    getDefaultSelection(): any;
    getDefaultPagination(props: any): any;
    getSortOrderColumns(columns: any): any;
    getDefaultFilters(columns: any): any;
    getDefaultSortOrder(columns: any): any;
    getSortStateFromColumns(columns: any): {
        sSortColumn: any;
        sSortOrder: any;
    };
    getMaxCurrent(total: any): any;
    getRecordKey(record: any, index: any): any;
    getSorterFn(state: any): (a: any, b: any) => any;
    getCurrentPageData(): any;
    getFlatData(): any[];
    getFlatCurrentPageData(): any[];
    getLocalData(state: any, filter?: boolean): any;
    onRow(prefixCls: any, record: any, index: any): any;
    setSelectedRowKeys(selectedRowKeys: any, selectionInfo: any): void;
    generatePopupContainerFunc(getPopupContainer: any): any;
    scrollToFirstRow(): void;
    isSameColumn(a: any, b: any): any;
    handleFilter(column: any, nextFilters: any): void;
    handleSelect(record: any, rowIndex: any, e: any): void;
    handleRadioSelect(record: any, rowIndex: any, e: any): void;
    handleSelectRow(selectionKey: any, index: any, onSelectFunc: any): any;
    handlePageChange(current: any, ...otherArguments: any[]): void;
    handleShowSizeChange(current: any, pageSize: any): void;
    toggleSortOrder(column: any): void;
    hasPagination(props: any): boolean;
    isSortColumn(column: any): boolean;
    prepareParamsArguments(state: any, column: any): any[];
    findColumn(myKey: any): any;
    recursiveSort(data: any, sorterFn: any): any;
    renderExpandIcon(prefixCls: string): any;
    renderPagination(prefixCls: any, paginationPosition: any): JSX.Element;
    renderSelectionBox(type: any): ({ record, index }: {
        record: any;
        index: any;
    }) => JSX.Element;
    renderRowSelection({ prefixCls, locale, getPopupContainer }: {
        prefixCls: any;
        locale: any;
        getPopupContainer: any;
    }): any;
    renderColumnsDropdown({ prefixCls, dropdownPrefixCls, columns, locale, getPopupContainer }: {
        prefixCls: any;
        dropdownPrefixCls: any;
        columns: any;
        locale: any;
        getPopupContainer: any;
    }): any;
    renderColumnTitle(title: any): any;
    renderTable({ prefixCls, renderEmpty, dropdownPrefixCls, contextLocale, getPopupContainer: contextGetPopupContainer, transformCellText, }: {
        prefixCls: any;
        renderEmpty: any;
        dropdownPrefixCls: any;
        contextLocale: any;
        getPopupContainer: any;
        transformCellText: any;
    }): JSX.Element;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
} & {
    locale?: {
        filterTitle: string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: string;
        expand: string;
        collapse: string;
    };
    scroll?: unknown;
    size?: "default" | "small" | "middle" | "large";
    loading?: boolean | {
        prefixCls: string;
        spinning: boolean;
        size: "default" | "small" | "large";
        wrapperClassName: string;
        tip: string;
        delay: number;
        indicator: any;
    };
    bordered?: boolean;
    showHeader?: boolean;
    bodyStyle?: import("vue").CSSProperties;
    pagination?: boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>;
    rowKey?: any;
    sortDirections?: import("./interface").SortOrder[];
    rowSelection?: {
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        getCheckboxProps: any;
        selections: boolean | unknown[] | (() => unknown[]);
        hideDefaultSelections: boolean;
        fixed: boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    };
    columns?: unknown;
    expandedRowRender?: any;
    defaultExpandAllRows?: boolean;
    expandIconAsCell?: boolean;
    expandRowByClick?: boolean;
    useFixedHeader?: boolean;
    childrenColumnName?: string | unknown[];
}>, {
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
}>;
export default _default;
