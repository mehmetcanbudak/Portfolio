export interface DirectoryTreeState {
    _expandedKeys?: string[];
    _selectedKeys?: string[];
}
declare const _default: import("vue").DefineComponent<{
    expandAction: import("vue-types").VueTypeDef<string | boolean>;
    showLine: import("vue-types").VueTypeValidableDef<boolean>;
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    autoExpandParent: import("vue-types").VueTypeValidableDef<boolean>;
    checkStrictly: import("vue-types").VueTypeValidableDef<boolean>;
    checkable: import("vue-types").VueTypeValidableDef<boolean>;
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    defaultExpandAll: import("vue-types").VueTypeValidableDef<boolean>;
    defaultExpandParent: import("vue-types").VueTypeValidableDef<boolean>;
    defaultExpandedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    expandedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    checkedKeys: import("vue-types").VueTypeDef<unknown[] | {
        checked: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        halfChecked: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
    }>;
    defaultCheckedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    selectedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    defaultSelectedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    selectable: import("vue-types").VueTypeValidableDef<boolean>;
    filterAntTreeNode: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loadData: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    loadedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    draggable: import("vue-types").VueTypeValidableDef<boolean>;
    showIcon: import("vue-types").VueTypeValidableDef<boolean>;
    icon: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    switcherIcon: import("vue-types").VueTypeValidableDef<any>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    filterTreeNode: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    openAnimation: import("vue-types").VueTypeValidableDef<any>;
    treeData: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    replaceFields: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    blockNode: import("vue-types").VueTypeValidableDef<boolean>;
    onExpand: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onCheck: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onDoubleclick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onDblclick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:selectedKeys': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:checkedKeys': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:expandedKeys': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    children: any;
    onDebounceExpand: any;
    tree: any;
    lastSelectedKey: any[];
    cachedSelectedKeys: any[];
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    _expandedKeys: any[] | string[];
    _selectedKeys: any[] | string[];
}, {}, {
    handleExpand(expandedKeys: any, info: any): any;
    handleClick(event: any, node: any): void;
    handleDoubleClick(event: any, node: any): void;
    hanldeSelect(keys: any, event: any): void;
    setTreeRef(node: any): void;
    expandFolderNode(event: any, node: any): void;
    setUncontrolledState(state: any): void;
    handleCheck(checkedObj: any, eventObj: any): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    selectedKeys: unknown[];
    defaultSelectedKeys: unknown[];
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    treeData: unknown[];
    replaceFields: {
        [key: string]: any;
    };
    expandedKeys: unknown[];
    loadedKeys: unknown[];
    defaultExpandedKeys: unknown[];
    defaultCheckedKeys: unknown[];
    filterAntTreeNode: (...args: any[]) => any;
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
} & {
    multiple?: boolean;
    disabled?: boolean;
    showIcon?: boolean;
    selectable?: boolean;
    openAnimation?: any;
    draggable?: boolean;
    checkedKeys?: unknown[] | {
        checked: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        halfChecked: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
    };
    switcherIcon?: any;
    autoExpandParent?: boolean;
    checkable?: boolean;
    blockNode?: boolean;
    showLine?: boolean;
    checkStrictly?: boolean;
    defaultExpandAll?: boolean;
    defaultExpandParent?: boolean;
    expandAction?: string | boolean;
}>, {
    icon: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onDblclick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    selectedKeys: unknown[];
    defaultSelectedKeys: unknown[];
    "onUpdate:selectedKeys": (...args: any[]) => any;
    loadData: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    filterTreeNode: (...args: any[]) => any;
    treeData: unknown[];
    replaceFields: {
        [key: string]: any;
    };
    expandedKeys: unknown[];
    loadedKeys: unknown[];
    defaultExpandedKeys: unknown[];
    defaultCheckedKeys: unknown[];
    filterAntTreeNode: (...args: any[]) => any;
    onCheck: (...args: any[]) => any;
    onDoubleclick: (...args: any[]) => any;
    "onUpdate:checkedKeys": (...args: any[]) => any;
    "onUpdate:expandedKeys": (...args: any[]) => any;
}>;
export default _default;
