declare var _default: import("vue").DefineComponent<{
    onClick: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    selectable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    focusable: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    defaultActiveFirst: import("vue-types").VueTypeValidableDef<boolean>;
    visible: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    activeKey: import("vue-types").VueTypeDef<string | number>;
    selectedKeys: import("vue-types").VueTypeDef<(string | number)[]>;
    defaultSelectedKeys: import("vue-types").VueTypeDef<(string | number)[]> & {
        default: () => (string | number)[];
    };
    defaultOpenKeys: import("vue-types").VueTypeDef<(string | number)[]> & {
        default: () => (string | number)[];
    };
    openKeys: import("vue-types").VueTypeDef<(string | number)[]>;
    openAnimation: import("vue-types").VueTypeDef<string | {
        [key: string]: any;
    }>;
    mode: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    triggerSubMenuAction: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    subMenuOpenDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    subMenuCloseDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    level: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    inlineIndent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    theme: import("vue-types").VueTypeDef<string> & {
        default: string;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    openTransitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    forceSubMenuRender: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    isRootMenu: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
    expandIcon: import("vue-types").VueTypeValidableDef<any>;
    overflowedIndicator: import("vue-types").VueTypeValidableDef<any>;
    onSelect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    onDeselect: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    children: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
}, any, {}, {}, {
    handleSelect(selectInfo: any): void;
    handleClick(e: any): void;
    onKeyDown(e: any, callback: any): void;
    onOpenChange(event: any): void;
    handleDeselect(selectInfo: any): void;
    getOpenTransitionName(): any;
    updateMiniStore(): void;
    saveInnerMenu(ref: any): void;
}, {
    methods: {
        setState(state: {}, callback: any): void;
        __emit(...args: any[]): void;
    };
}, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    onClick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    mode: string;
    visible: boolean;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    selectable: boolean;
    focusable: boolean;
    theme: string;
    inlineIndent: number;
    level: number;
    defaultSelectedKeys: (string | number)[];
    defaultOpenKeys: (string | number)[];
    openTransitionName: string;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    forceSubMenuRender: boolean;
} & {
    children?: import("../_util/type").VueNode;
    multiple?: boolean;
    itemIcon?: any;
    openKeys?: (string | number)[];
    activeKey?: string | number;
    selectedKeys?: (string | number)[];
    openAnimation?: string | {
        [key: string]: any;
    };
    defaultActiveFirst?: boolean;
    expandIcon?: any;
    overflowedIndicator?: any;
}>, {
    onClick: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    mode: string;
    visible: boolean;
    builtinPlacements: {
        [key: string]: any;
    };
    onDeselect: (...args: any[]) => any;
    selectable: boolean;
    focusable: boolean;
    theme: string;
    inlineIndent: number;
    level: number;
    defaultSelectedKeys: (string | number)[];
    defaultOpenKeys: (string | number)[];
    openTransitionName: string;
    isRootMenu: boolean;
    triggerSubMenuAction: string;
    subMenuOpenDelay: number;
    subMenuCloseDelay: number;
    forceSubMenuRender: boolean;
}>;
export default _default;
