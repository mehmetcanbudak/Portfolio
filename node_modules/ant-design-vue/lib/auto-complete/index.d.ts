import { App, VNode } from 'vue';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        }> & Pick<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        } & {
            virtual?: boolean;
            dropdownMatchSelectWidth?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: import("../select").SelectValue;
            size?: "default" | "small" | "middle" | "large";
            open?: boolean;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: any;
            placeholder?: import("../_util/type").VueNode;
            backfill?: boolean;
            dropdownAlign?: any;
            defaultValue?: import("../select").SelectValue;
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            dropdownMenuStyle?: import("vue").CSSProperties;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "virtual" | "dropdownMatchSelectWidth" | "mode" | "value" | "size" | "open" | "disabled" | "notFoundContent" | "menuItemSelectedIcon" | "labelInValue" | "autofocus" | "removeIcon" | "maxTagPlaceholder" | "placeholder" | "backfill" | "dropdownAlign" | "defaultValue" | "autoClearSearchValue" | "allowClear" | "clearIcon" | "showArrow" | "defaultOpen" | "loading" | "suffixIcon" | "itemIcon" | "dropdownMenuStyle">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "blur" | "focus" | "select", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        } & {
            virtual?: boolean;
            dropdownMatchSelectWidth?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: import("../select").SelectValue;
            size?: "default" | "small" | "middle" | "large";
            open?: boolean;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: any;
            placeholder?: import("../_util/type").VueNode;
            backfill?: boolean;
            dropdownAlign?: any;
            defaultValue?: import("../select").SelectValue;
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            dropdownMenuStyle?: import("vue").CSSProperties;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            popupRef: any;
            select: any;
        }, unknown, {}, {
            savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            getInputElement(): JSX.Element;
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blur" | "focus" | "select")[], string, {
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        children: unknown[];
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onKeyup: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onMousedown: (...args: any[]) => any;
        onMouseenter: (...args: any[]) => any;
        onMouseleave: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        direction: string;
        getPopupContainer: (...args: any[]) => any;
        id: string;
        options: unknown[];
        defaultActiveFirstOption: boolean;
        searchValue: string;
        optionLabelProp: string;
        optionFilterProp: string;
        filterOption: any;
        tabindex: number;
        maxTagCount: number;
        maxTagTextLength: number;
        tokenSeparators: unknown[];
        tagRender: (...args: any[]) => any;
        choiceTransitionName: string;
        showSearch: boolean;
        onInputKeyDown: (...args: any[]) => any;
        onSearch: (...args: any[]) => any;
        animation: string;
        transitionName: string;
        dropdownStyle: {
            [key: string]: any;
        };
        dropdownClassName: string;
        dropdownRender: (...args: any[]) => any;
        showAction: unknown[];
        inputValue: string;
        onClear: (...args: any[]) => any;
        listHeight: number;
        listItemHeight: number;
        onPopupScroll: (...args: any[]) => any;
        onDropdownVisibleChange: (...args: any[]) => any;
        onDeselect: (...args: any[]) => any;
        internalProps: {
            [key: string]: any;
        };
        bordered: boolean;
        dataSource: unknown[];
    } & {
        virtual?: boolean;
        dropdownMatchSelectWidth?: boolean;
        mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
        value?: import("../select").SelectValue;
        size?: "default" | "small" | "middle" | "large";
        open?: boolean;
        disabled?: boolean;
        notFoundContent?: import("../_util/type").VueNode;
        menuItemSelectedIcon?: import("../_util/type").VueNode;
        labelInValue?: boolean;
        autofocus?: boolean;
        removeIcon?: import("../_util/type").VueNode;
        maxTagPlaceholder?: any;
        placeholder?: import("../_util/type").VueNode;
        backfill?: boolean;
        dropdownAlign?: any;
        defaultValue?: import("../select").SelectValue;
        autoClearSearchValue?: boolean;
        allowClear?: boolean;
        clearIcon?: import("../_util/type").VueNode;
        showArrow?: boolean;
        defaultOpen?: boolean;
        loading?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        itemIcon?: import("../_util/type").VueNode;
        dropdownMenuStyle?: import("vue").CSSProperties;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        popupRef: any;
        select: any;
    }> & {} & {
        savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        getInputElement(): JSX.Element;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    getPopupContainer: (...args: any[]) => any;
    id: string;
    options: unknown[];
    defaultActiveFirstOption: boolean;
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    filterOption: any;
    tabindex: number;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    showSearch: boolean;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    animation: string;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    dataSource: unknown[];
} & {
    virtual?: boolean;
    dropdownMatchSelectWidth?: boolean;
    mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
    value?: import("../select").SelectValue;
    size?: "default" | "small" | "middle" | "large";
    open?: boolean;
    disabled?: boolean;
    notFoundContent?: import("../_util/type").VueNode;
    menuItemSelectedIcon?: import("../_util/type").VueNode;
    labelInValue?: boolean;
    autofocus?: boolean;
    removeIcon?: import("../_util/type").VueNode;
    maxTagPlaceholder?: any;
    placeholder?: import("../_util/type").VueNode;
    backfill?: boolean;
    dropdownAlign?: any;
    defaultValue?: import("../select").SelectValue;
    autoClearSearchValue?: boolean;
    allowClear?: boolean;
    clearIcon?: import("../_util/type").VueNode;
    showArrow?: boolean;
    defaultOpen?: boolean;
    loading?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    itemIcon?: import("../_util/type").VueNode;
    dropdownMenuStyle?: import("vue").CSSProperties;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    popupRef: any;
    select: any;
}, unknown, {}, {
    savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    getInputElement(): JSX.Element;
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blur" | "focus" | "select")[], "select" | "change" | "focus" | "blur", {
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    getPopupContainer: (...args: any[]) => any;
    id: string;
    options: unknown[];
    defaultActiveFirstOption: boolean;
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    filterOption: any;
    tabindex: number;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    showSearch: boolean;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    animation: string;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    dataSource: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Option: import("../vc-select/Option").OptionFC;
    readonly OptGroup: import("../vc-select/OptGroup").OptionGroupFC;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        }> & Pick<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        } & {
            virtual?: boolean;
            dropdownMatchSelectWidth?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: import("../select").SelectValue;
            size?: "default" | "small" | "middle" | "large";
            open?: boolean;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: any;
            placeholder?: import("../_util/type").VueNode;
            backfill?: boolean;
            dropdownAlign?: any;
            defaultValue?: import("../select").SelectValue;
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            dropdownMenuStyle?: import("vue").CSSProperties;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "virtual" | "dropdownMatchSelectWidth" | "mode" | "value" | "size" | "open" | "disabled" | "notFoundContent" | "menuItemSelectedIcon" | "labelInValue" | "autofocus" | "removeIcon" | "maxTagPlaceholder" | "placeholder" | "backfill" | "dropdownAlign" | "defaultValue" | "autoClearSearchValue" | "allowClear" | "clearIcon" | "showArrow" | "defaultOpen" | "loading" | "suffixIcon" | "itemIcon" | "dropdownMenuStyle">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: "change" | "blur" | "focus" | "select", ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        } & {
            virtual?: boolean;
            dropdownMatchSelectWidth?: boolean;
            mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
            value?: import("../select").SelectValue;
            size?: "default" | "small" | "middle" | "large";
            open?: boolean;
            disabled?: boolean;
            notFoundContent?: import("../_util/type").VueNode;
            menuItemSelectedIcon?: import("../_util/type").VueNode;
            labelInValue?: boolean;
            autofocus?: boolean;
            removeIcon?: import("../_util/type").VueNode;
            maxTagPlaceholder?: any;
            placeholder?: import("../_util/type").VueNode;
            backfill?: boolean;
            dropdownAlign?: any;
            defaultValue?: import("../select").SelectValue;
            autoClearSearchValue?: boolean;
            allowClear?: boolean;
            clearIcon?: import("../_util/type").VueNode;
            showArrow?: boolean;
            defaultOpen?: boolean;
            loading?: boolean;
            suffixIcon?: import("../_util/type").VueNode;
            itemIcon?: import("../_util/type").VueNode;
            dropdownMenuStyle?: import("vue").CSSProperties;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            popupRef: any;
            select: any;
        }, unknown, {}, {
            savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>): void;
            getInputElement(): JSX.Element;
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blur" | "focus" | "select")[], string, {
            children: unknown[];
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            onClick: (...args: any[]) => any;
            onMousedown: (...args: any[]) => any;
            onMouseenter: (...args: any[]) => any;
            onMouseleave: (...args: any[]) => any;
            onSelect: (...args: any[]) => any;
            prefixCls: string;
            direction: string;
            getPopupContainer: (...args: any[]) => any;
            id: string;
            options: unknown[];
            defaultActiveFirstOption: boolean;
            searchValue: string;
            optionLabelProp: string;
            optionFilterProp: string;
            filterOption: any;
            tabindex: number;
            maxTagCount: number;
            maxTagTextLength: number;
            tokenSeparators: unknown[];
            tagRender: (...args: any[]) => any;
            choiceTransitionName: string;
            showSearch: boolean;
            onInputKeyDown: (...args: any[]) => any;
            onSearch: (...args: any[]) => any;
            animation: string;
            transitionName: string;
            dropdownStyle: {
                [key: string]: any;
            };
            dropdownClassName: string;
            dropdownRender: (...args: any[]) => any;
            showAction: unknown[];
            inputValue: string;
            onClear: (...args: any[]) => any;
            listHeight: number;
            listItemHeight: number;
            onPopupScroll: (...args: any[]) => any;
            onDropdownVisibleChange: (...args: any[]) => any;
            onDeselect: (...args: any[]) => any;
            internalProps: {
                [key: string]: any;
            };
            bordered: boolean;
            dataSource: unknown[];
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        children: unknown[];
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onKeyup: (...args: any[]) => any;
        onClick: (...args: any[]) => any;
        onMousedown: (...args: any[]) => any;
        onMouseenter: (...args: any[]) => any;
        onMouseleave: (...args: any[]) => any;
        onSelect: (...args: any[]) => any;
        prefixCls: string;
        direction: string;
        getPopupContainer: (...args: any[]) => any;
        id: string;
        options: unknown[];
        defaultActiveFirstOption: boolean;
        searchValue: string;
        optionLabelProp: string;
        optionFilterProp: string;
        filterOption: any;
        tabindex: number;
        maxTagCount: number;
        maxTagTextLength: number;
        tokenSeparators: unknown[];
        tagRender: (...args: any[]) => any;
        choiceTransitionName: string;
        showSearch: boolean;
        onInputKeyDown: (...args: any[]) => any;
        onSearch: (...args: any[]) => any;
        animation: string;
        transitionName: string;
        dropdownStyle: {
            [key: string]: any;
        };
        dropdownClassName: string;
        dropdownRender: (...args: any[]) => any;
        showAction: unknown[];
        inputValue: string;
        onClear: (...args: any[]) => any;
        listHeight: number;
        listItemHeight: number;
        onPopupScroll: (...args: any[]) => any;
        onDropdownVisibleChange: (...args: any[]) => any;
        onDeselect: (...args: any[]) => any;
        internalProps: {
            [key: string]: any;
        };
        bordered: boolean;
        dataSource: unknown[];
    } & {
        virtual?: boolean;
        dropdownMatchSelectWidth?: boolean;
        mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
        value?: import("../select").SelectValue;
        size?: "default" | "small" | "middle" | "large";
        open?: boolean;
        disabled?: boolean;
        notFoundContent?: import("../_util/type").VueNode;
        menuItemSelectedIcon?: import("../_util/type").VueNode;
        labelInValue?: boolean;
        autofocus?: boolean;
        removeIcon?: import("../_util/type").VueNode;
        maxTagPlaceholder?: any;
        placeholder?: import("../_util/type").VueNode;
        backfill?: boolean;
        dropdownAlign?: any;
        defaultValue?: import("../select").SelectValue;
        autoClearSearchValue?: boolean;
        allowClear?: boolean;
        clearIcon?: import("../_util/type").VueNode;
        showArrow?: boolean;
        defaultOpen?: boolean;
        loading?: boolean;
        suffixIcon?: import("../_util/type").VueNode;
        itemIcon?: import("../_util/type").VueNode;
        dropdownMenuStyle?: import("vue").CSSProperties;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        popupRef: any;
        select: any;
    }> & {} & {
        savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>): void;
        getInputElement(): JSX.Element;
        focus(): void;
        blur(): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    getPopupContainer: (...args: any[]) => any;
    id: string;
    options: unknown[];
    defaultActiveFirstOption: boolean;
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    filterOption: any;
    tabindex: number;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    showSearch: boolean;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    animation: string;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    dataSource: unknown[];
} & {
    virtual?: boolean;
    dropdownMatchSelectWidth?: boolean;
    mode?: "multiple" | "tags" | "SECRET_COMBOBOX_MODE_DO_NOT_USE";
    value?: import("../select").SelectValue;
    size?: "default" | "small" | "middle" | "large";
    open?: boolean;
    disabled?: boolean;
    notFoundContent?: import("../_util/type").VueNode;
    menuItemSelectedIcon?: import("../_util/type").VueNode;
    labelInValue?: boolean;
    autofocus?: boolean;
    removeIcon?: import("../_util/type").VueNode;
    maxTagPlaceholder?: any;
    placeholder?: import("../_util/type").VueNode;
    backfill?: boolean;
    dropdownAlign?: any;
    defaultValue?: import("../select").SelectValue;
    autoClearSearchValue?: boolean;
    allowClear?: boolean;
    clearIcon?: import("../_util/type").VueNode;
    showArrow?: boolean;
    defaultOpen?: boolean;
    loading?: boolean;
    suffixIcon?: import("../_util/type").VueNode;
    itemIcon?: import("../_util/type").VueNode;
    dropdownMenuStyle?: import("vue").CSSProperties;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    popupRef: any;
    select: any;
}, unknown, {}, {
    savePopupRef(ref: VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    saveSelect(node: VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>): void;
    getInputElement(): JSX.Element;
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blur" | "focus" | "select")[], "select" | "change" | "focus" | "blur", {
    children: unknown[];
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    onClick: (...args: any[]) => any;
    onMousedown: (...args: any[]) => any;
    onMouseenter: (...args: any[]) => any;
    onMouseleave: (...args: any[]) => any;
    onSelect: (...args: any[]) => any;
    prefixCls: string;
    direction: string;
    getPopupContainer: (...args: any[]) => any;
    id: string;
    options: unknown[];
    defaultActiveFirstOption: boolean;
    searchValue: string;
    optionLabelProp: string;
    optionFilterProp: string;
    filterOption: any;
    tabindex: number;
    maxTagCount: number;
    maxTagTextLength: number;
    tokenSeparators: unknown[];
    tagRender: (...args: any[]) => any;
    choiceTransitionName: string;
    showSearch: boolean;
    onInputKeyDown: (...args: any[]) => any;
    onSearch: (...args: any[]) => any;
    animation: string;
    transitionName: string;
    dropdownStyle: {
        [key: string]: any;
    };
    dropdownClassName: string;
    dropdownRender: (...args: any[]) => any;
    showAction: unknown[];
    inputValue: string;
    onClear: (...args: any[]) => any;
    listHeight: number;
    listItemHeight: number;
    onPopupScroll: (...args: any[]) => any;
    onDropdownVisibleChange: (...args: any[]) => any;
    onDeselect: (...args: any[]) => any;
    internalProps: {
        [key: string]: any;
    };
    bordered: boolean;
    dataSource: unknown[];
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Option: import("../vc-select/Option").OptionFC;
    readonly OptGroup: import("../vc-select/OptGroup").OptionGroupFC;
});
export default _default;
