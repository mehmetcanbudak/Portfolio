import { App } from 'vue';
import Group from './Group';
import Search from './Search';
import TextArea from './TextArea';
import Password from './Password';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            stateValue: string | number;
            isFocused: boolean;
        };
        $props: Partial<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        } & {
            value?: string | number;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            placeholder?: string | number;
            defaultValue?: string | number;
            allowClear?: boolean;
            loading?: boolean;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            addonBefore?: import("../_util/type").VueNode;
            addonAfter?: import("../_util/type").VueNode;
            readonly?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "value" | "size" | "disabled" | "autofocus" | "placeholder" | "defaultValue" | "allowClear" | "loading" | "prefix" | "suffix" | "addonBefore" | "addonAfter" | "readonly">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        } & {
            value?: string | number;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            placeholder?: string | number;
            defaultValue?: string | number;
            allowClear?: boolean;
            loading?: boolean;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            addonBefore?: import("../_util/type").VueNode;
            addonAfter?: import("../_util/type").VueNode;
            readonly?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            removePasswordTimeout: any;
            input: any;
            clearableInput: any;
        }, {
            stateValue: string | number;
            isFocused: boolean;
        }, {}, {
            handleInputFocus(e: Event): void;
            handleInputBlur(e: Event): void;
            focus(): void;
            blur(): void;
            select(): void;
            saveClearableInput(input: HTMLInputElement): void;
            saveInput(input: HTMLInputElement): void;
            setValue(value: string | number, callback?: Function): void;
            triggerChange(e: Event): void;
            handleReset(e: Event): void;
            renderInput(prefixCls: string, { addonBefore, addonAfter }: {
                addonBefore: any;
                addonAfter: any;
            }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>;
            clearPasswordValueAttribute(): void;
            handleChange(e: Event): void;
            handleKeyDown(e: KeyboardEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onInput: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onKeyup: (...args: any[]) => any;
        prefixCls: string;
        name: string;
        type: string;
        inputPrefixCls: string;
        lazy: boolean;
        maxlength: number;
        onPressEnter: (...args: any[]) => any;
        "onUpdate:value": (...args: any[]) => any;
    } & {
        value?: string | number;
        size?: "default" | "small" | "large";
        disabled?: boolean;
        autofocus?: boolean;
        placeholder?: string | number;
        defaultValue?: string | number;
        allowClear?: boolean;
        loading?: boolean;
        prefix?: import("../_util/type").VueNode;
        suffix?: import("../_util/type").VueNode;
        addonBefore?: import("../_util/type").VueNode;
        addonAfter?: import("../_util/type").VueNode;
        readonly?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        removePasswordTimeout: any;
        input: any;
        clearableInput: any;
    }> & {
        stateValue: string | number;
        isFocused: boolean;
    } & {} & {
        handleInputFocus(e: Event): void;
        handleInputBlur(e: Event): void;
        focus(): void;
        blur(): void;
        select(): void;
        saveClearableInput(input: HTMLInputElement): void;
        saveInput(input: HTMLInputElement): void;
        setValue(value: string | number, callback?: Function): void;
        triggerChange(e: Event): void;
        handleReset(e: Event): void;
        renderInput(prefixCls: string, { addonBefore, addonAfter }: {
            addonBefore: any;
            addonAfter: any;
        }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        clearPasswordValueAttribute(): void;
        handleChange(e: Event): void;
        handleKeyDown(e: KeyboardEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    type: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
    "onUpdate:value": (...args: any[]) => any;
} & {
    value?: string | number;
    size?: "default" | "small" | "large";
    disabled?: boolean;
    autofocus?: boolean;
    placeholder?: string | number;
    defaultValue?: string | number;
    allowClear?: boolean;
    loading?: boolean;
    prefix?: import("../_util/type").VueNode;
    suffix?: import("../_util/type").VueNode;
    addonBefore?: import("../_util/type").VueNode;
    addonAfter?: import("../_util/type").VueNode;
    readonly?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    removePasswordTimeout: any;
    input: any;
    clearableInput: any;
}, {
    stateValue: string | number;
    isFocused: boolean;
}, {}, {
    handleInputFocus(e: Event): void;
    handleInputBlur(e: Event): void;
    focus(): void;
    blur(): void;
    select(): void;
    saveClearableInput(input: HTMLInputElement): void;
    saveInput(input: HTMLInputElement): void;
    setValue(value: string | number, callback?: Function): void;
    triggerChange(e: Event): void;
    handleReset(e: Event): void;
    renderInput(prefixCls: string, { addonBefore, addonAfter }: {
        addonBefore: any;
        addonAfter: any;
    }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    clearPasswordValueAttribute(): void;
    handleChange(e: Event): void;
    handleKeyDown(e: KeyboardEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    type: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
    "onUpdate:value": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Group: typeof Group;
    readonly Search: typeof Search;
    readonly TextArea: typeof TextArea;
    readonly Password: typeof Password;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            stateValue: string | number;
            isFocused: boolean;
        };
        $props: Partial<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        }> & Pick<Readonly<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        } & {
            value?: string | number;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            placeholder?: string | number;
            defaultValue?: string | number;
            allowClear?: boolean;
            loading?: boolean;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            addonBefore?: import("../_util/type").VueNode;
            addonAfter?: import("../_util/type").VueNode;
            readonly?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "value" | "size" | "disabled" | "autofocus" | "placeholder" | "defaultValue" | "allowClear" | "loading" | "prefix" | "suffix" | "addonBefore" | "addonAfter" | "readonly">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        } & {
            value?: string | number;
            size?: "default" | "small" | "large";
            disabled?: boolean;
            autofocus?: boolean;
            placeholder?: string | number;
            defaultValue?: string | number;
            allowClear?: boolean;
            loading?: boolean;
            prefix?: import("../_util/type").VueNode;
            suffix?: import("../_util/type").VueNode;
            addonBefore?: import("../_util/type").VueNode;
            addonAfter?: import("../_util/type").VueNode;
            readonly?: boolean;
        }>, {
            configProvider: import("../config-provider").ConfigConsumerProps;
            removePasswordTimeout: any;
            input: any;
            clearableInput: any;
        }, {
            stateValue: string | number;
            isFocused: boolean;
        }, {}, {
            handleInputFocus(e: Event): void;
            handleInputBlur(e: Event): void;
            focus(): void;
            blur(): void;
            select(): void;
            saveClearableInput(input: HTMLInputElement): void;
            saveInput(input: HTMLInputElement): void;
            setValue(value: string | number, callback?: Function): void;
            triggerChange(e: Event): void;
            handleReset(e: Event): void;
            renderInput(prefixCls: string, { addonBefore, addonAfter }: {
                addonBefore: any;
                addonAfter: any;
            }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>;
            clearPasswordValueAttribute(): void;
            handleChange(e: Event): void;
            handleKeyDown(e: KeyboardEvent): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            onFocus: (...args: any[]) => any;
            onBlur: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            onInput: (...args: any[]) => any;
            onKeydown: (...args: any[]) => any;
            onKeyup: (...args: any[]) => any;
            prefixCls: string;
            name: string;
            type: string;
            inputPrefixCls: string;
            lazy: boolean;
            maxlength: number;
            onPressEnter: (...args: any[]) => any;
            "onUpdate:value": (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        onFocus: (...args: any[]) => any;
        onBlur: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        onInput: (...args: any[]) => any;
        onKeydown: (...args: any[]) => any;
        onKeyup: (...args: any[]) => any;
        prefixCls: string;
        name: string;
        type: string;
        inputPrefixCls: string;
        lazy: boolean;
        maxlength: number;
        onPressEnter: (...args: any[]) => any;
        "onUpdate:value": (...args: any[]) => any;
    } & {
        value?: string | number;
        size?: "default" | "small" | "large";
        disabled?: boolean;
        autofocus?: boolean;
        placeholder?: string | number;
        defaultValue?: string | number;
        allowClear?: boolean;
        loading?: boolean;
        prefix?: import("../_util/type").VueNode;
        suffix?: import("../_util/type").VueNode;
        addonBefore?: import("../_util/type").VueNode;
        addonAfter?: import("../_util/type").VueNode;
        readonly?: boolean;
    }> & import("vue").ShallowUnwrapRef<{
        configProvider: import("../config-provider").ConfigConsumerProps;
        removePasswordTimeout: any;
        input: any;
        clearableInput: any;
    }> & {
        stateValue: string | number;
        isFocused: boolean;
    } & {} & {
        handleInputFocus(e: Event): void;
        handleInputBlur(e: Event): void;
        focus(): void;
        blur(): void;
        select(): void;
        saveClearableInput(input: HTMLInputElement): void;
        saveInput(input: HTMLInputElement): void;
        setValue(value: string | number, callback?: Function): void;
        triggerChange(e: Event): void;
        handleReset(e: Event): void;
        renderInput(prefixCls: string, { addonBefore, addonAfter }: {
            addonBefore: any;
            addonAfter: any;
        }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        clearPasswordValueAttribute(): void;
        handleChange(e: Event): void;
        handleKeyDown(e: KeyboardEvent): void;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    type: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
    "onUpdate:value": (...args: any[]) => any;
} & {
    value?: string | number;
    size?: "default" | "small" | "large";
    disabled?: boolean;
    autofocus?: boolean;
    placeholder?: string | number;
    defaultValue?: string | number;
    allowClear?: boolean;
    loading?: boolean;
    prefix?: import("../_util/type").VueNode;
    suffix?: import("../_util/type").VueNode;
    addonBefore?: import("../_util/type").VueNode;
    addonAfter?: import("../_util/type").VueNode;
    readonly?: boolean;
}>, {
    configProvider: import("../config-provider").ConfigConsumerProps;
    removePasswordTimeout: any;
    input: any;
    clearableInput: any;
}, {
    stateValue: string | number;
    isFocused: boolean;
}, {}, {
    handleInputFocus(e: Event): void;
    handleInputBlur(e: Event): void;
    focus(): void;
    blur(): void;
    select(): void;
    saveClearableInput(input: HTMLInputElement): void;
    saveInput(input: HTMLInputElement): void;
    setValue(value: string | number, callback?: Function): void;
    triggerChange(e: Event): void;
    handleReset(e: Event): void;
    renderInput(prefixCls: string, { addonBefore, addonAfter }: {
        addonBefore: any;
        addonAfter: any;
    }): import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    clearPasswordValueAttribute(): void;
    handleChange(e: Event): void;
    handleKeyDown(e: KeyboardEvent): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    onInput: (...args: any[]) => any;
    onKeydown: (...args: any[]) => any;
    onKeyup: (...args: any[]) => any;
    prefixCls: string;
    name: string;
    type: string;
    inputPrefixCls: string;
    lazy: boolean;
    maxlength: number;
    onPressEnter: (...args: any[]) => any;
    "onUpdate:value": (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Group: typeof Group;
    readonly Search: typeof Search;
    readonly TextArea: typeof TextArea;
    readonly Password: typeof Password;
});
export default _default;
