import { App } from 'vue';
import Sider from './Sider';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            tagName: string;
        }> & Pick<Readonly<{
            prefixCls: string;
            tagName: string;
        } & {
            hasSider?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "hasSider">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            tagName: string;
        } & {
            hasSider?: boolean;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            tagName: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    tagName: string;
} & {
    hasSider?: boolean;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    tagName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly Header: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
    readonly Footer: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
    readonly Content: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
} & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Sider: typeof Sider;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            prefixCls: string;
            tagName: string;
        }> & Pick<Readonly<{
            prefixCls: string;
            tagName: string;
        } & {
            hasSider?: boolean;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "hasSider">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            prefixCls: string;
            tagName: string;
        } & {
            hasSider?: boolean;
        }>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            prefixCls: string;
            tagName: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    prefixCls: string;
    tagName: string;
} & {
    hasSider?: boolean;
}>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    prefixCls: string;
    tagName: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    readonly Header: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
    readonly Footer: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
    readonly Content: import("vue").DefineComponent<{
        prefixCls: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
        hasSider: import("vue-types").VueTypeValidableDef<boolean>;
        tagName: import("vue-types").VueTypeValidableDef<string> & {
            default: string;
        };
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        prefixCls: string;
        tagName: string;
    } & {
        hasSider?: boolean;
    }>, {
        prefixCls: string;
        tagName: string;
    }>;
} & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Sider: typeof Sider;
});
export default _default;
