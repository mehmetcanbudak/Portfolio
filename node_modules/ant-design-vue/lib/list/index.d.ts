import { App } from 'vue';
import Item, { ListItemMeta } from './Item';
export { ListItemProps, ListItemMetaProps, ListItemMeta } from './Item';
export declare const ColumnCount: (string | number)[];
export declare const ColumnType: string[];
export declare const ListGridType: {
    gutter: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    column: import("vue-types").VueTypeDef<string | number>;
    xs: import("vue-types").VueTypeDef<string | number>;
    sm: import("vue-types").VueTypeDef<string | number>;
    md: import("vue-types").VueTypeDef<string | number>;
    lg: import("vue-types").VueTypeDef<string | number>;
    xl: import("vue-types").VueTypeDef<string | number>;
    xxl: import("vue-types").VueTypeDef<string | number>;
};
export declare const ListSize: ["small", "default", "large"];
export declare const ListProps: () => {
    bordered: import("vue-types").VueTypeValidableDef<boolean>;
    dataSource: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    extra: import("vue-types").VueTypeValidableDef<any>;
    grid: import("vue-types").VueTypeLooseShape<{
        gutter: number;
        column: string | number;
        xs: string | number;
        sm: string | number;
        md: string | number;
        lg: string | number;
        xl: string | number;
        xxl: string | number;
    }>;
    itemLayout: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    loading: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }>;
    loadMore: import("vue-types").VueTypeValidableDef<any>;
    pagination: import("vue-types").VueTypeDef<boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>>;
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    rowKey: import("vue-types").VueTypeValidableDef<any>;
    renderItem: import("vue-types").VueTypeValidableDef<any>;
    size: import("vue-types").VueTypeDef<"default" | "small" | "large">;
    split: import("vue-types").VueTypeValidableDef<boolean>;
    header: import("vue-types").VueTypeValidableDef<any>;
    footer: import("vue-types").VueTypeValidableDef<any>;
    locale: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
};
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            paginationCurrent: number;
            paginationSize: number;
        };
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        }> & Pick<Readonly<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        } & {
            footer?: any;
            header?: any;
            grid?: {
                gutter: number;
                column: string | number;
                xs: string | number;
                sm: string | number;
                md: string | number;
                lg: string | number;
                xl: string | number;
                xxl: string | number;
            };
            size?: "default" | "small" | "large";
            renderItem?: any;
            split?: boolean;
            loading?: boolean | {
                [key: string]: any;
            };
            bordered?: boolean;
            extra?: any;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            loadMore?: any;
            rowKey?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "footer" | "header" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "grid" | "size" | "renderItem" | "split" | "loading" | "bordered" | "extra" | "pagination" | "loadMore" | "rowKey">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        } & {
            footer?: any;
            header?: any;
            grid?: {
                gutter: number;
                column: string | number;
                xs: string | number;
                sm: string | number;
                md: string | number;
                lg: string | number;
                xl: string | number;
                xxl: string | number;
            };
            size?: "default" | "small" | "large";
            renderItem?: any;
            split?: boolean;
            loading?: boolean | {
                [key: string]: any;
            };
            bordered?: boolean;
            extra?: any;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            loadMore?: any;
            rowKey?: any;
        }>, {
            keys: any[];
            defaultPaginationProps: {};
            onPaginationChange: any;
            onPaginationShowSizeChange: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            paginationCurrent: number;
            paginationSize: number;
        }, {}, {
            triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
            innerRenderItem(item: any, index: any): any;
            isSomethingAfterLastItem(): boolean;
            renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        dataSource: unknown[];
        itemLayout: string;
    } & {
        footer?: any;
        header?: any;
        grid?: {
            gutter: number;
            column: string | number;
            xs: string | number;
            sm: string | number;
            md: string | number;
            lg: string | number;
            xl: string | number;
            xxl: string | number;
        };
        size?: "default" | "small" | "large";
        renderItem?: any;
        split?: boolean;
        loading?: boolean | {
            [key: string]: any;
        };
        bordered?: boolean;
        extra?: any;
        pagination?: boolean | Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            current: number;
            role: string;
            size: string;
            itemRender: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            showSizeChange: (...args: any[]) => any;
            selectPrefixCls: string;
        } & {
            disabled?: boolean;
            position?: "top" | "bottom" | "both";
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }>;
        loadMore?: any;
        rowKey?: any;
    }> & import("vue").ShallowUnwrapRef<{
        keys: any[];
        defaultPaginationProps: {};
        onPaginationChange: any;
        onPaginationShowSizeChange: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        paginationCurrent: number;
        paginationSize: number;
    } & {} & {
        triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
        innerRenderItem(item: any, index: any): any;
        isSomethingAfterLastItem(): boolean;
        renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    prefixCls: string;
    dataSource: unknown[];
    itemLayout: string;
} & {
    footer?: any;
    header?: any;
    grid?: {
        gutter: number;
        column: string | number;
        xs: string | number;
        sm: string | number;
        md: string | number;
        lg: string | number;
        xl: string | number;
        xxl: string | number;
    };
    size?: "default" | "small" | "large";
    renderItem?: any;
    split?: boolean;
    loading?: boolean | {
        [key: string]: any;
    };
    bordered?: boolean;
    extra?: any;
    pagination?: boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>;
    loadMore?: any;
    rowKey?: any;
}>, {
    keys: any[];
    defaultPaginationProps: {};
    onPaginationChange: any;
    onPaginationShowSizeChange: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    paginationCurrent: number;
    paginationSize: number;
}, {}, {
    triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
    innerRenderItem(item: any, index: any): any;
    isSomethingAfterLastItem(): boolean;
    renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: {
        [key: string]: any;
    };
    prefixCls: string;
    dataSource: unknown[];
    itemLayout: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Item: typeof Item & {
        readonly Meta: typeof ListItemMeta;
    };
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {
            paginationCurrent: number;
            paginationSize: number;
        };
        $props: Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        }> & Pick<Readonly<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        } & {
            footer?: any;
            header?: any;
            grid?: {
                gutter: number;
                column: string | number;
                xs: string | number;
                sm: string | number;
                md: string | number;
                lg: string | number;
                xl: string | number;
                xxl: string | number;
            };
            size?: "default" | "small" | "large";
            renderItem?: any;
            split?: boolean;
            loading?: boolean | {
                [key: string]: any;
            };
            bordered?: boolean;
            extra?: any;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            loadMore?: any;
            rowKey?: any;
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "footer" | "header" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "grid" | "size" | "renderItem" | "split" | "loading" | "bordered" | "extra" | "pagination" | "loadMore" | "rowKey">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        } & {
            footer?: any;
            header?: any;
            grid?: {
                gutter: number;
                column: string | number;
                xs: string | number;
                sm: string | number;
                md: string | number;
                lg: string | number;
                xl: string | number;
                xxl: string | number;
            };
            size?: "default" | "small" | "large";
            renderItem?: any;
            split?: boolean;
            loading?: boolean | {
                [key: string]: any;
            };
            bordered?: boolean;
            extra?: any;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            loadMore?: any;
            rowKey?: any;
        }>, {
            keys: any[];
            defaultPaginationProps: {};
            onPaginationChange: any;
            onPaginationShowSizeChange: any;
            configProvider: import("../config-provider").ConfigConsumerProps;
        }, {
            paginationCurrent: number;
            paginationSize: number;
        }, {}, {
            triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
            innerRenderItem(item: any, index: any): any;
            isSomethingAfterLastItem(): boolean;
            renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            dataSource: unknown[];
            itemLayout: string;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        dataSource: unknown[];
        itemLayout: string;
    } & {
        footer?: any;
        header?: any;
        grid?: {
            gutter: number;
            column: string | number;
            xs: string | number;
            sm: string | number;
            md: string | number;
            lg: string | number;
            xl: string | number;
            xxl: string | number;
        };
        size?: "default" | "small" | "large";
        renderItem?: any;
        split?: boolean;
        loading?: boolean | {
            [key: string]: any;
        };
        bordered?: boolean;
        extra?: any;
        pagination?: boolean | Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            current: number;
            role: string;
            size: string;
            itemRender: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            showSizeChange: (...args: any[]) => any;
            selectPrefixCls: string;
        } & {
            disabled?: boolean;
            position?: "top" | "bottom" | "both";
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }>;
        loadMore?: any;
        rowKey?: any;
    }> & import("vue").ShallowUnwrapRef<{
        keys: any[];
        defaultPaginationProps: {};
        onPaginationChange: any;
        onPaginationShowSizeChange: any;
        configProvider: import("../config-provider").ConfigConsumerProps;
    }> & {
        paginationCurrent: number;
        paginationSize: number;
    } & {} & {
        triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
        innerRenderItem(item: any, index: any): any;
        isSomethingAfterLastItem(): boolean;
        renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    locale: {
        [key: string]: any;
    };
    prefixCls: string;
    dataSource: unknown[];
    itemLayout: string;
} & {
    footer?: any;
    header?: any;
    grid?: {
        gutter: number;
        column: string | number;
        xs: string | number;
        sm: string | number;
        md: string | number;
        lg: string | number;
        xl: string | number;
        xxl: string | number;
    };
    size?: "default" | "small" | "large";
    renderItem?: any;
    split?: boolean;
    loading?: boolean | {
        [key: string]: any;
    };
    bordered?: boolean;
    extra?: any;
    pagination?: boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>;
    loadMore?: any;
    rowKey?: any;
}>, {
    keys: any[];
    defaultPaginationProps: {};
    onPaginationChange: any;
    onPaginationShowSizeChange: any;
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    paginationCurrent: number;
    paginationSize: number;
}, {}, {
    triggerPaginationEvent(eventName: any): (page: any, pageSize: any) => void;
    innerRenderItem(item: any, index: any): any;
    isSomethingAfterLastItem(): boolean;
    renderEmpty(prefixCls: any, renderEmpty: any): JSX.Element;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    locale: {
        [key: string]: any;
    };
    prefixCls: string;
    dataSource: unknown[];
    itemLayout: string;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Item: typeof Item & {
        readonly Meta: typeof ListItemMeta;
    };
});
export default _default;
