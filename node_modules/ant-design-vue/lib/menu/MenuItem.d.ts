import { SiderContextProps } from '../layout/Sider';
declare const _default: import("vue").DefineComponent<{
    attribute: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    rootPrefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    eventKey: import("vue-types").VueTypeDef<string | number>;
    active: import("vue-types").VueTypeValidableDef<boolean>;
    selectedKeys: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    disabled: import("vue-types").VueTypeValidableDef<boolean>;
    title: import("vue-types").VueTypeValidableDef<any>;
    index: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    };
    inlineIndent: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    level: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    mode: import("vue-types").VueTypeDef<string>;
    multiple: import("vue-types").VueTypeValidableDef<boolean>;
    value: import("vue-types").VueTypeValidableDef<any>;
    isSelected: import("vue-types").VueTypeValidableDef<boolean>;
    manualRef: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    } & {
        default: (...args: any[]) => any;
    };
    role: import("vue-types").VueTypeValidableDef<any>;
    subMenuKey: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    itemIcon: import("vue-types").VueTypeValidableDef<any>;
}, {
    getInlineCollapsed: () => boolean;
    layoutSiderContext: SiderContextProps;
    injectExtraProps: () => {};
}, unknown, {}, {
    onKeyDown(e: HTMLElement): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    rootPrefixCls: string;
    index: number;
    selectedKeys: unknown[];
    subMenuKey: string;
    attribute: {
        [key: string]: any;
    };
    inlineIndent: number;
    level: number;
    manualRef: (...args: any[]) => any;
} & {
    title?: any;
    mode?: string;
    value?: any;
    role?: any;
    multiple?: boolean;
    active?: boolean;
    disabled?: boolean;
    itemIcon?: any;
    eventKey?: string | number;
    isSelected?: boolean;
}>, {
    rootPrefixCls: string;
    index: number;
    selectedKeys: unknown[];
    subMenuKey: string;
    attribute: {
        [key: string]: any;
    };
    inlineIndent: number;
    level: number;
    manualRef: (...args: any[]) => any;
}>;
export default _default;
