import { App } from 'vue';
import Column from './Column';
import ColumnGroup from './ColumnGroup';
declare const _default: ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }> & Pick<Readonly<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        } & {
            locale?: {
                filterTitle: string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: string;
                expand: string;
                collapse: string;
            };
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: string;
                spinning: boolean;
                size: "default" | "small" | "large";
                wrapperClassName: string;
                tip: string;
                delay: number;
                indicator: any;
            };
            bordered?: boolean;
            showHeader?: boolean;
            bodyStyle?: import("vue").CSSProperties;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            rowKey?: any;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
                getCheckboxProps: any;
                selections: boolean | unknown[] | (() => unknown[]);
                hideDefaultSelections: boolean;
                fixed: boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            useFixedHeader?: boolean;
            childrenColumnName?: string | unknown[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "locale" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "scroll" | "size" | "loading" | "bordered" | "showHeader" | "bodyStyle" | "pagination" | "rowKey" | "sortDirections" | "rowSelection" | "columns" | "expandedRowRender" | "defaultExpandAllRows" | "expandIconAsCell" | "expandRowByClick" | "useFixedHeader" | "childrenColumnName">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        } & {
            locale?: {
                filterTitle: string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: string;
                expand: string;
                collapse: string;
            };
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: string;
                spinning: boolean;
                size: "default" | "small" | "large";
                wrapperClassName: string;
                tip: string;
                delay: number;
                indicator: any;
            };
            bordered?: boolean;
            showHeader?: boolean;
            bodyStyle?: import("vue").CSSProperties;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            rowKey?: any;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
                getCheckboxProps: any;
                selections: boolean | unknown[] | (() => unknown[]);
                hideDefaultSelections: boolean;
                fixed: boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            useFixedHeader?: boolean;
            childrenColumnName?: string | unknown[];
        }>, unknown, unknown, {}, {
            normalize(elements?: any[]): any[];
            updateColumns(cols?: any[]): any[];
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        footer: (...args: any[]) => any;
        title: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        prefixCls: string;
        getPopupContainer: (...args: any[]) => any;
        components: {
            [key: string]: any;
        };
        dataSource: unknown[];
        expandIcon: (...args: any[]) => any;
        dropdownPrefixCls: string;
        rowClassName: (...args: any[]) => any;
        defaultExpandedRowKeys: unknown[];
        expandedRowKeys: unknown[];
        expandIconColumnIndex: number;
        indentSize: number;
        customRow: (...args: any[]) => any;
        customHeaderRow: (...args: any[]) => any;
        tableLayout: string;
        transformCellText: (...args: any[]) => any;
        onExpandedRowsChange: (...args: any[]) => any;
        onExpand: (...args: any[]) => any;
        onRowClick: (...args: any[]) => any;
    } & {
        locale?: {
            filterTitle: string;
            filterConfirm: any;
            filterReset: any;
            emptyText: any;
            selectAll: any;
            selectInvert: any;
            sortTitle: string;
            expand: string;
            collapse: string;
        };
        scroll?: unknown;
        size?: "default" | "small" | "middle" | "large";
        loading?: boolean | {
            prefixCls: string;
            spinning: boolean;
            size: "default" | "small" | "large";
            wrapperClassName: string;
            tip: string;
            delay: number;
            indicator: any;
        };
        bordered?: boolean;
        showHeader?: boolean;
        bodyStyle?: import("vue").CSSProperties;
        pagination?: boolean | Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            current: number;
            role: string;
            size: string;
            itemRender: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            showSizeChange: (...args: any[]) => any;
            selectPrefixCls: string;
        } & {
            disabled?: boolean;
            position?: "top" | "bottom" | "both";
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }>;
        rowKey?: any;
        sortDirections?: import("./interface").SortOrder[];
        rowSelection?: {
            [key: string]: any;
        } | {
            type: "checkbox" | "radio";
            selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
            getCheckboxProps: any;
            selections: boolean | unknown[] | (() => unknown[]);
            hideDefaultSelections: boolean;
            fixed: boolean;
            columnWidth: string | number;
            selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
            columnTitle: any;
        };
        columns?: unknown;
        expandedRowRender?: any;
        defaultExpandAllRows?: boolean;
        expandIconAsCell?: boolean;
        expandRowByClick?: boolean;
        useFixedHeader?: boolean;
        childrenColumnName?: string | unknown[];
    }> & import("vue").ShallowUnwrapRef<{}> & {} & {
        normalize(elements?: any[]): any[];
        updateColumns(cols?: any[]): any[];
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
} & {
    locale?: {
        filterTitle: string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: string;
        expand: string;
        collapse: string;
    };
    scroll?: unknown;
    size?: "default" | "small" | "middle" | "large";
    loading?: boolean | {
        prefixCls: string;
        spinning: boolean;
        size: "default" | "small" | "large";
        wrapperClassName: string;
        tip: string;
        delay: number;
        indicator: any;
    };
    bordered?: boolean;
    showHeader?: boolean;
    bodyStyle?: import("vue").CSSProperties;
    pagination?: boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>;
    rowKey?: any;
    sortDirections?: import("./interface").SortOrder[];
    rowSelection?: {
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        getCheckboxProps: any;
        selections: boolean | unknown[] | (() => unknown[]);
        hideDefaultSelections: boolean;
        fixed: boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    };
    columns?: unknown;
    expandedRowRender?: any;
    defaultExpandAllRows?: boolean;
    expandIconAsCell?: boolean;
    expandRowByClick?: boolean;
    useFixedHeader?: boolean;
    childrenColumnName?: string | unknown[];
}>, unknown, unknown, {}, {
    normalize(elements?: any[]): any[];
    updateColumns(cols?: any[]): any[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & ((app: App<any>, ...options: any[]) => any) & {
    install?: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Column: typeof Column;
    readonly ColumnGroup: typeof ColumnGroup;
}) | ({
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }> & Pick<Readonly<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        } & {
            locale?: {
                filterTitle: string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: string;
                expand: string;
                collapse: string;
            };
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: string;
                spinning: boolean;
                size: "default" | "small" | "large";
                wrapperClassName: string;
                tip: string;
                delay: number;
                indicator: any;
            };
            bordered?: boolean;
            showHeader?: boolean;
            bodyStyle?: import("vue").CSSProperties;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            rowKey?: any;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
                getCheckboxProps: any;
                selections: boolean | unknown[] | (() => unknown[]);
                hideDefaultSelections: boolean;
                fixed: boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            useFixedHeader?: boolean;
            childrenColumnName?: string | unknown[];
        }> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "style" | "locale" | "class" | "key" | "ref" | "onVnodeBeforeMount" | "onVnodeMounted" | "onVnodeBeforeUpdate" | "onVnodeUpdated" | "onVnodeBeforeUnmount" | "onVnodeUnmounted" | "scroll" | "size" | "loading" | "bordered" | "showHeader" | "bodyStyle" | "pagination" | "rowKey" | "sortDirections" | "rowSelection" | "columns" | "expandedRowRender" | "defaultExpandAllRows" | "expandIconAsCell" | "expandRowByClick" | "useFixedHeader" | "childrenColumnName">;
        $attrs: Record<string, unknown>;
        $refs: Record<string, unknown>;
        $slots: Readonly<{
            [name: string]: import("vue").Slot;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<{
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        } & {
            locale?: {
                filterTitle: string;
                filterConfirm: any;
                filterReset: any;
                emptyText: any;
                selectAll: any;
                selectInvert: any;
                sortTitle: string;
                expand: string;
                collapse: string;
            };
            scroll?: unknown;
            size?: "default" | "small" | "middle" | "large";
            loading?: boolean | {
                prefixCls: string;
                spinning: boolean;
                size: "default" | "small" | "large";
                wrapperClassName: string;
                tip: string;
                delay: number;
                indicator: any;
            };
            bordered?: boolean;
            showHeader?: boolean;
            bodyStyle?: import("vue").CSSProperties;
            pagination?: boolean | Partial<{
                locale: {
                    [key: string]: any;
                };
                prefixCls: string;
                current: number;
                role: string;
                size: string;
                itemRender: (...args: any[]) => any;
                total: number;
                defaultCurrent: number;
                defaultPageSize: number;
                pageSize: number;
                buildOptionText: (...args: any[]) => any;
                showSizeChange: (...args: any[]) => any;
                selectPrefixCls: string;
            } & {
                disabled?: boolean;
                position?: "top" | "bottom" | "both";
                hideOnSinglePage?: boolean;
                showSizeChanger?: boolean;
                pageSizeOptions?: (string | number)[];
                showQuickJumper?: boolean | {
                    [key: string]: any;
                };
                showTotal?: any;
                simple?: boolean;
                showLessItems?: boolean;
            }>;
            rowKey?: any;
            sortDirections?: import("./interface").SortOrder[];
            rowSelection?: {
                [key: string]: any;
            } | {
                type: "checkbox" | "radio";
                selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
                getCheckboxProps: any;
                selections: boolean | unknown[] | (() => unknown[]);
                hideDefaultSelections: boolean;
                fixed: boolean;
                columnWidth: string | number;
                selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
                columnTitle: any;
            };
            columns?: unknown;
            expandedRowRender?: any;
            defaultExpandAllRows?: boolean;
            expandIconAsCell?: boolean;
            expandRowByClick?: boolean;
            useFixedHeader?: boolean;
            childrenColumnName?: string | unknown[];
        }>, unknown, unknown, {}, {
            normalize(elements?: any[]): any[];
            updateColumns(cols?: any[]): any[];
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
            footer: (...args: any[]) => any;
            title: (...args: any[]) => any;
            onChange: (...args: any[]) => any;
            prefixCls: string;
            getPopupContainer: (...args: any[]) => any;
            components: {
                [key: string]: any;
            };
            dataSource: unknown[];
            expandIcon: (...args: any[]) => any;
            dropdownPrefixCls: string;
            rowClassName: (...args: any[]) => any;
            defaultExpandedRowKeys: unknown[];
            expandedRowKeys: unknown[];
            expandIconColumnIndex: number;
            indentSize: number;
            customRow: (...args: any[]) => any;
            customHeaderRow: (...args: any[]) => any;
            tableLayout: string;
            transformCellText: (...args: any[]) => any;
            onExpandedRowsChange: (...args: any[]) => any;
            onExpand: (...args: any[]) => any;
            onRowClick: (...args: any[]) => any;
        }>;
        $forceUpdate: import("vue").ReactiveEffect<any>;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<{
        footer: (...args: any[]) => any;
        title: (...args: any[]) => any;
        onChange: (...args: any[]) => any;
        prefixCls: string;
        getPopupContainer: (...args: any[]) => any;
        components: {
            [key: string]: any;
        };
        dataSource: unknown[];
        expandIcon: (...args: any[]) => any;
        dropdownPrefixCls: string;
        rowClassName: (...args: any[]) => any;
        defaultExpandedRowKeys: unknown[];
        expandedRowKeys: unknown[];
        expandIconColumnIndex: number;
        indentSize: number;
        customRow: (...args: any[]) => any;
        customHeaderRow: (...args: any[]) => any;
        tableLayout: string;
        transformCellText: (...args: any[]) => any;
        onExpandedRowsChange: (...args: any[]) => any;
        onExpand: (...args: any[]) => any;
        onRowClick: (...args: any[]) => any;
    } & {
        locale?: {
            filterTitle: string;
            filterConfirm: any;
            filterReset: any;
            emptyText: any;
            selectAll: any;
            selectInvert: any;
            sortTitle: string;
            expand: string;
            collapse: string;
        };
        scroll?: unknown;
        size?: "default" | "small" | "middle" | "large";
        loading?: boolean | {
            prefixCls: string;
            spinning: boolean;
            size: "default" | "small" | "large";
            wrapperClassName: string;
            tip: string;
            delay: number;
            indicator: any;
        };
        bordered?: boolean;
        showHeader?: boolean;
        bodyStyle?: import("vue").CSSProperties;
        pagination?: boolean | Partial<{
            locale: {
                [key: string]: any;
            };
            prefixCls: string;
            current: number;
            role: string;
            size: string;
            itemRender: (...args: any[]) => any;
            total: number;
            defaultCurrent: number;
            defaultPageSize: number;
            pageSize: number;
            buildOptionText: (...args: any[]) => any;
            showSizeChange: (...args: any[]) => any;
            selectPrefixCls: string;
        } & {
            disabled?: boolean;
            position?: "top" | "bottom" | "both";
            hideOnSinglePage?: boolean;
            showSizeChanger?: boolean;
            pageSizeOptions?: (string | number)[];
            showQuickJumper?: boolean | {
                [key: string]: any;
            };
            showTotal?: any;
            simple?: boolean;
            showLessItems?: boolean;
        }>;
        rowKey?: any;
        sortDirections?: import("./interface").SortOrder[];
        rowSelection?: {
            [key: string]: any;
        } | {
            type: "checkbox" | "radio";
            selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
            getCheckboxProps: any;
            selections: boolean | unknown[] | (() => unknown[]);
            hideDefaultSelections: boolean;
            fixed: boolean;
            columnWidth: string | number;
            selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
            columnTitle: any;
        };
        columns?: unknown;
        expandedRowRender?: any;
        defaultExpandAllRows?: boolean;
        expandIconAsCell?: boolean;
        expandRowByClick?: boolean;
        useFixedHeader?: boolean;
        childrenColumnName?: string | unknown[];
    }> & import("vue").ShallowUnwrapRef<{}> & {} & {
        normalize(elements?: any[]): any[];
        updateColumns(cols?: any[]): any[];
    } & import("vue").ComponentCustomProperties;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<{
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
} & {
    locale?: {
        filterTitle: string;
        filterConfirm: any;
        filterReset: any;
        emptyText: any;
        selectAll: any;
        selectInvert: any;
        sortTitle: string;
        expand: string;
        collapse: string;
    };
    scroll?: unknown;
    size?: "default" | "small" | "middle" | "large";
    loading?: boolean | {
        prefixCls: string;
        spinning: boolean;
        size: "default" | "small" | "large";
        wrapperClassName: string;
        tip: string;
        delay: number;
        indicator: any;
    };
    bordered?: boolean;
    showHeader?: boolean;
    bodyStyle?: import("vue").CSSProperties;
    pagination?: boolean | Partial<{
        locale: {
            [key: string]: any;
        };
        prefixCls: string;
        current: number;
        role: string;
        size: string;
        itemRender: (...args: any[]) => any;
        total: number;
        defaultCurrent: number;
        defaultPageSize: number;
        pageSize: number;
        buildOptionText: (...args: any[]) => any;
        showSizeChange: (...args: any[]) => any;
        selectPrefixCls: string;
    } & {
        disabled?: boolean;
        position?: "top" | "bottom" | "both";
        hideOnSinglePage?: boolean;
        showSizeChanger?: boolean;
        pageSizeOptions?: (string | number)[];
        showQuickJumper?: boolean | {
            [key: string]: any;
        };
        showTotal?: any;
        simple?: boolean;
        showLessItems?: boolean;
    }>;
    rowKey?: any;
    sortDirections?: import("./interface").SortOrder[];
    rowSelection?: {
        [key: string]: any;
    } | {
        type: "checkbox" | "radio";
        selectedRowKeys: unknown[] | (((props: Record<string, unknown>) => unknown[]) & (() => unknown[]) & (() => unknown[]));
        getCheckboxProps: any;
        selections: boolean | unknown[] | (() => unknown[]);
        hideDefaultSelections: boolean;
        fixed: boolean;
        columnWidth: string | number;
        selectWay: "onSelect" | "onSelectMultiple" | "onSelectAll" | "onSelectInvert";
        columnTitle: any;
    };
    columns?: unknown;
    expandedRowRender?: any;
    defaultExpandAllRows?: boolean;
    expandIconAsCell?: boolean;
    expandRowByClick?: boolean;
    useFixedHeader?: boolean;
    childrenColumnName?: string | unknown[];
}>, unknown, unknown, {}, {
    normalize(elements?: any[]): any[];
    updateColumns(cols?: any[]): any[];
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, {
    footer: (...args: any[]) => any;
    title: (...args: any[]) => any;
    onChange: (...args: any[]) => any;
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    components: {
        [key: string]: any;
    };
    dataSource: unknown[];
    expandIcon: (...args: any[]) => any;
    dropdownPrefixCls: string;
    rowClassName: (...args: any[]) => any;
    defaultExpandedRowKeys: unknown[];
    expandedRowKeys: unknown[];
    expandIconColumnIndex: number;
    indentSize: number;
    customRow: (...args: any[]) => any;
    customHeaderRow: (...args: any[]) => any;
    tableLayout: string;
    transformCellText: (...args: any[]) => any;
    onExpandedRowsChange: (...args: any[]) => any;
    onExpand: (...args: any[]) => any;
    onRowClick: (...args: any[]) => any;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App<any>, ...options: any[]) => any;
} & {
    readonly Column: typeof Column;
    readonly ColumnGroup: typeof ColumnGroup;
});
export default _default;
