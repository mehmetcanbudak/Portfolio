import { ExtractPropTypes } from 'vue';
declare const tooltipProps: {
    title: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    trigger: import("vue-types").VueTypeDef<"focus" | "click" | "contextmenu" | "hover" | ("focus" | "click" | "contextmenu" | "hover")[]> & {
        default: "focus" | "click" | "contextmenu" | "hover" | (() => ("focus" | "click" | "contextmenu" | "hover")[]);
    };
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeDef<"top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom"> & {
        default: "top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }> & {
        default: boolean | (() => {
            [key: string]: any;
        });
    };
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    children: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
};
export declare type TooltipProps = Partial<ExtractPropTypes<typeof tooltipProps>>;
declare const _default: import("vue").DefineComponent<{
    title: import("vue-types").VueTypeValidableDef<import("../_util/type").VueNode>;
    trigger: import("vue-types").VueTypeDef<"focus" | "click" | "contextmenu" | "hover" | ("focus" | "click" | "contextmenu" | "hover")[]> & {
        default: "focus" | "click" | "contextmenu" | "hover" | (() => ("focus" | "click" | "contextmenu" | "hover")[]);
    };
    visible: import("vue-types").VueTypeValidableDef<boolean>;
    defaultVisible: import("vue-types").VueTypeValidableDef<boolean>;
    placement: import("vue-types").VueTypeDef<"top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom"> & {
        default: "top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    };
    transitionName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    } & {
        default: string;
    };
    overlayStyle: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    overlayClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    openClassName: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    prefixCls: import("vue-types").VueTypeValidableDef<string> & {
        default: string;
    };
    mouseEnterDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    mouseLeaveDelay: import("vue-types").VueTypeValidableDef<number> & {
        default: number;
    } & {
        default: number;
    };
    getPopupContainer: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    arrowPointAtCenter: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    autoAdjustOverflow: import("vue-types").VueTypeDef<boolean | {
        [key: string]: any;
    }> & {
        default: boolean | (() => {
            [key: string]: any;
        });
    };
    destroyTooltipOnHide: import("vue-types").VueTypeValidableDef<boolean> & {
        default: boolean;
    };
    align: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    } & {
        default: () => {
            [key: string]: any;
        };
    };
    builtinPlacements: import("vue-types").VueTypeValidableDef<{
        [key: string]: any;
    }> & {
        default: () => {
            [key: string]: any;
        };
    };
    children: import("vue-types").VueTypeValidableDef<unknown[]> & {
        default: () => unknown[];
    };
    onVisibleChange: import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
    'onUpdate:visible': import("vue-types").VueTypeValidableDef<(...args: any[]) => any> & {
        default: (...args: any[]) => any;
    };
}, {
    configProvider: import("../config-provider").ConfigConsumerProps;
}, {
    sVisible: boolean;
}, {}, {
    handleVisibleChange(visible: any): void;
    getPopupDomNode(): any;
    getPlacements(): {
        [key: string]: any;
    };
    getDisabledCompatibleChildren(ele: any): any;
    isNoTitle(): boolean;
    getOverlay(): any;
    onPopupAlign(domNode: any, align: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "visibleChange")[], "update:visible" | "visibleChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    children: unknown[];
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: "focus" | "click" | "contextmenu" | "hover" | ("focus" | "click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    overlayStyle: {
        [key: string]: any;
    };
    openClassName: string;
    autoAdjustOverflow: boolean | {
        [key: string]: any;
    };
    arrowPointAtCenter: boolean;
    destroyTooltipOnHide: boolean;
} & {
    title?: import("../_util/type").VueNode;
    visible?: boolean;
    defaultVisible?: boolean;
}>, {
    children: unknown[];
    prefixCls: string;
    getPopupContainer: (...args: any[]) => any;
    align: {
        [key: string]: any;
    };
    transitionName: string;
    builtinPlacements: {
        [key: string]: any;
    };
    mouseEnterDelay: number;
    mouseLeaveDelay: number;
    placement: "top" | "bottom" | "left" | "right" | "bottomRight" | "bottomLeft" | "topLeft" | "topRight" | "leftTop" | "leftBottom" | "rightTop" | "rightBottom";
    onVisibleChange: (...args: any[]) => any;
    "onUpdate:visible": (...args: any[]) => any;
    trigger: "focus" | "click" | "contextmenu" | "hover" | ("focus" | "click" | "contextmenu" | "hover")[];
    overlayClassName: string;
    overlayStyle: {
        [key: string]: any;
    };
    openClassName: string;
    autoAdjustOverflow: boolean | {
        [key: string]: any;
    };
    arrowPointAtCenter: boolean;
    destroyTooltipOnHide: boolean;
}>;
export default _default;
