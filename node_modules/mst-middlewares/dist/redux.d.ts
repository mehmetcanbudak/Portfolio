import { IAnyStateTreeNode } from "mobx-state-tree";
/**
 * Creates a tiny proxy around a MST tree that conforms to the redux store api.
 * This makes it possible to use MST inside a redux application.
 *
 * See the [redux-todomvc example](https://github.com/mobxjs/mobx-state-tree/blob/e9e804c8c43e1edde4aabbd52675544e2b3a905b/examples/redux-todomvc/src/index.js#L20) for more details.
 *
 * @export
 * @param {*} model
 * @param {...MiddleWare[]} middlewares
 * @returns {IReduxStore}
 */
export declare const asReduxStore: (model: IAnyStateTreeNode, ...middlewares: any[]) => {
    getState: () => any;
    dispatch: (action: any) => void;
    subscribe: (listener: any) => import("mobx-state-tree").IDisposer;
};
/**
 * Connects a MST tree to the Redux devtools.
 * See this [example](https://github.com/mobxjs/mobx-state-tree/blob/e9e804c8c43e1edde4aabbd52675544e2b3a905b/examples/redux-todomvc/src/index.js#L21)
 * for a setup example.
 *
 * @export
 * @param {*} remoteDevDep
 * @param {IAnyStateTreeNode} model
 * @param {{
 *         logIdempotentActionSteps?: boolean
 *         logChildActions?: boolean
 *         logArgsNearName?: boolean
 *     }} [options]
 */
export declare function connectReduxDevtools(remoteDevDep: any, model: IAnyStateTreeNode, options?: {
    logIdempotentActionSteps?: boolean;
    logChildActions?: boolean;
    logArgsNearName?: boolean;
}): void;
